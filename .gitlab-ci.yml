default:
  image: node:22

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  a11y_urls: $CAR_NPM_REPOSITORY_URL

stages:
  - dependencies
  - lint
  - build
  - test
  - scan
  - pages
  - deploy
  - accessibility
  - publish

#Install basic dependencies using yarn
install_dependencies:
  stage: dependencies
  tags:
    - k8srunner
  script:
    - rm -rf node_modules && yarn install
  artifacts:
    expire_in: 1 week
    paths:
      - node_modules/

#Run the static code analysis
code_analysis:
  stage: lint
  tags:
    - k8srunner
  allow_failure: true
  before_script:
    - mkdir -p build/reports
  script:
    - yarn install
    - yarn run code-analysis
    - mv linting.xml build/reports/linting.xml
  artifacts:
    paths:
      - build/

# run the test coverage reports
test_and_coverage:
  image: cypress/browsers:22.11.0
  stage: test
  allow_failure: true
  tags:
    - k8srunner
  before_script:
    - mkdir -p build/reports
    - mkdir -p build/.nyc_output
    - yarn 
  script:
    - yarn storybook &
    - yarn test:component:headless
    - yarn test:coverage:report:ci
    - cp build/reports/cobertura-coverage.xml build/reports/code-coverage.xml

  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/reports/cobertura-coverage.xml
    paths:
      - build/

test-counts:
  image: cypress/browsers:22.11.0
  stage: test
  allow_failure: true
  tags:
    - k8srunner
  cache:
    paths:
      - node_modules/
    policy: pull
  before_script:
    - mkdir -p build/tests
    - mkdir -p build/reports
    - yarn install --immutable
  script:
    - yarn test:cypress:component:ci
    - yarn merge-reports
  artifacts:
    paths:
      - build/

# list the current top level dependencies for the project
list_dependencies:
  stage: scan
  tags:
    - k8srunner
  allow_failure: true
  script:
    - npm list --depth=0 --json >> npm_deps.json
    - npm list --depth=0  >> npm_deps.txt
    - mkdir .public
    - cp npm_deps.txt .public/
    - cp npm_deps.json .public/
  artifacts:
    paths:
      - .public

# Build the application
build:
  stage: build
  tags:
    - k8srunner
  script:
    - yarn build
  artifacts:
    paths:
      - dist/

# Publish the artifacts to CAR
publish-to-car:
  stage: publish
  image: node:lts-alpine
  tags:
    - k8srunner
  before_script:
    - npm config set registry $CAR_NPM_REPOSITORY_URL
    # npm config set always-auth true
    - echo $CAR_NPM_REPOSITORY_URL | awk -F '://' '{ cmd="npm config set -- //"$2":_auth \"${CAR_NPM_TOKEN}\" ";system(cmd) }'
    - npm config get
  script:
    - npm publish
  rules:
    # Publish from a tag for a release
    - if: $CI_COMMIT_TAG

# Publish the artifacts to gitlab registry
publish-to-gitlab:
  image: node:lts-alpine
  stage: publish
  tags:
    - k8srunner
  before_script:
    - npm config set @ska-telescope:registry https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/
    - npm config set -- '//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken' "${CI_JOB_TOKEN}"
  script:
    - npm version --no-git-tag-version $(npm show latest version)-dev.$CI_COMMIT_SHORT_SHA
    - npm publish
  rules:
    #Â Do not publish on a tag pipeline, note this shouldn't transfer over to SKAO templates
    - if: $CI_COMMIT_TAG
      when: never

# export the report
pages:
  stage: pages
  tags:
    - k8srunner
  dependencies:
    - test_and_coverage
    - test-counts
    - list_dependencies
    - code_quality
  script:
    - mv public/* .
    - cp -r build/* public
    - cp -r .public/* public
  artifacts:
    paths:
      - public
    expire_in: 30 days

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: "Verify/Accessibility.gitlab-ci.yml"
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml

  # .post step finalizers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'
  # .post step finalizers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'
  # deploy
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

code_quality:
  # https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html#generate-an-html-report
  artifacts:
    paths: [gl-code-quality-report.json]
  # disable dind service as it's not needed for k8srunner runners
  script: echo 'code quality does not need a script'
  services: []
  tags:
    - k8srunner
  # We need to merge the rules with what we have here on template rules
  # https://gitlab.com/ska-telescope/templates-repository/-/blob/master/gitlab-ci/includes/rules.gitlab-ci.yml
  # https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html#using-with-merge-request-pipelines
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    # don't run branch pipeline if there are open MRs
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    # run on MRs
    - if: $CI_MERGE_REQUEST_IID
    # For `$CI_DEFAULT_BRANCH` branch, create a pipeline (this includes on schedules, pushes, merges, etc.).
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    # For tags, create a pipeline.
    - if: '$CI_COMMIT_TAG'
    # run on branches
    - if: '$CI_COMMIT_BRANCH'
